---
description: 
globs: **/*.java, **/*.xml
alwaysApply: false
---

# Logging Standards

## Context

- Apply when implementing logging in Spring Boot applications
- Ensures consistent and useful log output across the application
- Facilitates troubleshooting and monitoring

## Critical Rules

- Use SLF4J API for all logging
- Configure Logback in a properly structured `logback.xml` file
- Use appropriate log levels (DEBUG, INFO, WARN, ERROR)
- Include MDC (Mapped Diagnostic Context) for request tracking
- Implement asynchronous logging for improved performance
- Log all exceptions with sufficient context
- Add structured logging for machine parsing
- Do not log sensitive information like passwords or tokens
- Use parameterized logging to avoid string concatenation

## Examples

<example>
// Good practice
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class UserService {
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    
    public User createUser(UserDTO userDTO) {
        logger.info("Creating user with username: {}", userDTO.getUsername());
        try {
            // Implementation
            return user;
        } catch (Exception e) {
            logger.error("Failed to create user: {}", userDTO.getUsername(), e);
            throw e;
        }
    }
}
</example>

<example type="invalid">
// Bad practice - Using System.out or improper logging
@Service
public class UserService {
    public User createUser(UserDTO userDTO) {
        System.out.println("Creating user " + userDTO.getUsername());
        try {
            // Implementation
            return user;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }
}
</example> 